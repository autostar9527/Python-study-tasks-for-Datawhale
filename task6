完成飞机大战游戏设计
【作业要求】如下:
自己敲一遍源代码，对自己负责
写出代码的整体框架：
可以分为游戏背景、游戏玩家、游戏敌机，而在游戏玩家里包含子弹。
写出每个类及每个函数的作用
整理代码实现过程中遇到的问题
实验结果截图
游戏主要代码如下：
import pygame
from plane_sprite import *


class PlaneGame(object):
    """飞机精灵"""

    # hero = Hero()

    # 初始化方法
    def __init__(self, height=700, width=480):
        print("游戏初始化...")
        # 初始化屏幕位置
        self.screen = pygame.display.set_mode((width, height))
        # 刷新率
        self.clock = pygame.time.Clock()
        # 创建精灵
        self.__create_sprites()
        # 定时器事件, 创建敌机, 发射子弹
        pygame.time.set_timer(CREATE_ENEMY_EVENT, 1000)
        pygame.time.set_timer(HERO_FIRE_EVENT, 200)

    # 创建精灵族
    def __create_sprites(self):
        # em1 = GameSprite("./images/enemy1.png")
        # em2 = GameSprite("./images/enemy1.png", 2)
        self.em_ground = pygame.sprite.Group()

        bg1 = Background()
        bg2 = Background(True)
        self.bg_group = pygame.sprite.Group(bg1, bg2)

        # 创建Hero精灵
        self.hero = Hero()
        self.hero_group = pygame.sprite.Group(self.hero)

    # 开始游戏
    def start_game(self):
        print("游戏开始...")

        while True:
            # 1. 设置刷新帧率
            self.clock.tick(FRAME_PER_SEC)
            # 2. 事件监听
            self.__event_handler()
            # 3. 碰撞检测
            self.__check_collide()
            # 4. 更新/绘制精灵组
            self.__update_sprites()
            # 5. 更新画面
            pygame.display.update()

    # 检测碰撞
    def __check_collide(self):
        pygame.sprite.groupcollide(self.hero.bullet_group, self.em_ground, True, True)
        sprite_list = pygame.sprite.spritecollide(self.hero, self.em_ground, False)
        if len(sprite_list) > 0:
            self.hero.kill()
            PlaneGame.__game_over()

    # 更新精灵
    def __update_sprites(self):

        self.bg_group.update()
        self.bg_group.draw(self.screen)

        self.em_ground.update()
        self.em_ground.draw(self.screen)

        self.hero_group.update()
        self.hero_group.draw(self.screen)

        self.hero.bullet_group.update()
        self.hero.bullet_group.draw(self.screen)

    # 事件处理
    def __event_handler(self):
        event_list = pygame.event.get()
        for event in event_list:
            # 1. 退出游戏事件
            if event.type == pygame.QUIT:
                PlaneGame.__game_over()
            elif event.type == CREATE_ENEMY_EVENT:
                # 创建敌机精灵
                en = Enemy()
                # 将敌机精灵添加到精灵族
                self.em_ground.add(en)
            # elif event.type == pygame.KEYDOWN:
            #     # 监听keyDown事件
            #     self.__key_down(event.key)
            #     pass
            elif event.type == HERO_FIRE_EVENT:
                # 发射子弹事件
                self.hero.fire()

        # 按键连续事件
        self.__key_down2()

    # 使用get_press 获取键盘连续事件
    def __key_down2(self):
        keys_press = pygame.key.get_pressed()
        if keys_press[pygame.K_RIGHT]:
            self.hero.k_left_right = 3
            # self.hero.speed = 2
            # print("get right...")
        elif keys_press[pygame.K_LEFT]:
            self.hero.k_left_right = -3
            # self.hero.speed = -2
            # print("get left...")
        elif keys_press[pygame.K_UP]:
            self.hero.k_up_down = -3
        elif keys_press[pygame.K_DOWN]:
            self.hero.k_up_down = 3
        else:
            self.hero.speed = 0
            self.hero.k_left_right = 0
            self.hero.k_up_down = 0


    # 按键事件判断 按下事件: 仅一次
    def __key_down1(self, event_key):
        if event_key == pygame.K_RIGHT:
            print("按键向右...")
            self.hero.speed = 2
            pass
        elif event_key == pygame.K_LEFT:
            self.hero.speed = -2
            print("按键向左...")
            pass
        else:
            self.hero.speed = 0

    # 退出游戏
    @staticmethod
    def __game_over():
        print("游戏结束...")
        pygame.quit()
        exit()


if __name__ == '__main__':
    game = PlaneGame()
    game.start_game()


游戏精灵的代码如下：

import random
import pygame


# 刷新帧率
FRAME_PER_SEC = 60
# 屏幕属性
SCREEN_RECT = pygame.Rect(0, 0, 480, 700)
# 创建敌军事件
CREATE_ENEMY_EVENT = pygame.USEREVENT
# 创建英雄发射子弹事件
HERO_FIRE_EVENT = pygame.USEREVENT + 1


class GameSprite(pygame.sprite.Sprite):
    """飞机大战游戏精灵"""

    def __init__(self, image_name_load, speed=1):

        # 1, 调用父类的方法 super().__init__()
        super().__init__()

        # 2. 图像位置速度
        self.image = pygame.image.load(image_name_load)
        # 获取图像的位置
        self.rect = self.image.get_rect()
        # 赋值速度
        self.speed = speed

    def update(self):
        # 在屏幕的垂直方向上移动
        self.rect.y += self.speed
        # # 判断位置, 超出部分, 重置精灵起始位置
        # if self.rect.y >= SCREEN_RECT.height:
        #     self.rect.y = SCREEN_RECT.y


class Background(GameSprite):
    """游戏背景精灵"""
    def update(self):
        # 1. 调用父类方法实现
        super().update()
        # 2. 判断是移除屏幕, 将图像摄者到图像上方

        if self.rect.y >= SCREEN_RECT.height:
            self.rect.y = -SCREEN_RECT.height

    def __init__(self, is_alt=False):
        """"""
        # 1. 调用父类方法创建精灵, 创建背景图片
        super().__init__("./images/background.png")
        # 2. 判断is_alt 修改图像位置
        if is_alt:
            self.rect.y = -SCREEN_RECT.height


class Enemy(GameSprite):
    """敌机精灵"""

    def __init__(self):
        # 初始化父类方法
        super().__init__("./images/enemy1.png")

        # 指定敌机的初始随机速度
        random_speed = random.randint(1, 3)
        self.speed = random_speed

        # 敌机初始随机位置, 最大值获取
        max_x = SCREEN_RECT.width-self.rect.width
        # 设置 x 的位置
        self.rect.x = random.randint(0, max_x)

        # 设置 Y 方向初始位置
        self.rect.bottom = 0

    def update(self):
        # 调用父类方法保持垂直方向飞行
        super().update()
        # 判断是否飞出屏幕, 如果飞出, 需要从精灵族删除敌机
        if self.rect.y >= SCREEN_RECT.height:
            # print("飞出屏幕, 需要删除...")
            # 删除精灵
            # self.__del__()
            # sprite 提供的kill()方法, 会将精灵在精灵族和内存中删除, 同时也调用__del__方法
            self.kill()

    # def __del__(self):
    #     # print("销毁敌机: %s" % self.rect)
    #     pass


class Hero(GameSprite):
    """英雄"""

    def __init__(self, key_up_down=0, key_left_right=0):
        # 调用父类方法
        super().__init__("./images/me1.png", 0)
        # 设置英雄位置
        self.rect.centerx = SCREEN_RECT.centerx
        self.rect.bottom = SCREEN_RECT.bottom - 120
        self.k_up_down = key_up_down
        self.k_left_right = key_left_right
        self.bullet_group = pygame.sprite.Group()
        pass

    def update(self):
        # 英雄在水平方向上运动
        self.rect.y += self.k_up_down
        self.rect.x += self.k_left_right
        # 设置水平方向的运行轨迹界限
        if self.rect.right >= SCREEN_RECT.right:
            self.rect.right = SCREEN_RECT.right
        elif self.rect.x <= 0:
            self.rect.x = 0
        # 试着垂直方向上的运行轨迹界限
        if self.rect.bottom >= SCREEN_RECT.bottom:
            self.rect.bottom = SCREEN_RECT.bottom
        elif self.rect.y <= 0:
            self.rect.y = 0

    def fire(self):
        # print("发射子弹... ")
        # 创建子弹
        bu = Bullet()
        # 子弹位置
        bu.rect.bottom = self.rect.y
        bu.rect.centerx = self.rect.centerx
        # 添加到精灵族
        self.bullet_group.add(bu)


class Bullet(GameSprite):
    """子弹精灵"""
    def __init__(self):
        # 创建子弹
        super().__init__("./images/bullet1.png", -2)

    def update(self):
        # 调用父类方法, 子弹严垂直方向飞行
        super().update()
        # 越界, 删除精灵
        if self.rect.bottom <= 0:
            self.kill()

    def __del__(self):
        print("bullet kill...")
        
